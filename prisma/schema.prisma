// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    description String
    SKU         String   @unique
    family      String?
    statusProduct Boolean  @default(false)
    deleted     Boolean?
    weight      Decimal?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    brand   Brand? @relation(fields: [brandId], references: [id])
    brandId Int?

    circularity Circularity[]

    @@map("product")
}

model Brand {
    id          Int      @id @default(autoincrement())
    description String
    deleted     Boolean?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product Product[]

    @@map("brand")
}

model Company {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    CNPJ      String   @unique
    active    Boolean  @default(true)
    deleted   Boolean?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User[]

    @@map("company")
}

model Profile {
    id            Int             @id @default(autoincrement())
    name          String          @unique
    active        Boolean         @default(true)
    deleted       Boolean         @default(false)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    allowAdd      Boolean         @default(false)
    allowSave     Boolean         @default(false)
    allowEdit     Boolean         @default(false)
    allowDelete   Boolean         @default(false)
    allowView     Boolean         @default(false)
    user          User[]
    profileAccess ProfileAccess[]

    @@map("profile")
}

model User {
    id                        String                     @id @unique @default(uuid())
    name                      String
    email                     String                     @unique @db.VarChar(255)
    password                  String
    profile                   Profile                    @relation(fields: [profileId], references: [id])
    profileId                 Int
    company                   Company                    @relation(fields: [companyId], references: [id])
    companyId                 Int
    active                    Boolean                    @default(false)
    deleted                   Boolean?
    resetPasswordNextLogin    Boolean?
    codeChangePassword        String?
    dateRequestChangePassword DateTime?
    createdAt                 DateTime                   @default(now())
    updatedAt                 DateTime                   @updatedAt
    circularity               Circularity[]
    circularityStatusHistory  CircularityStatusHistory[]

    @@map("user")
}

model Menu {
    id            Int             @id @default(autoincrement())
    description   String
    url           String
    active        Boolean         @default(false)
    showSideBar   Boolean         @default(false)
    showHome      Boolean         @default(false)
    isClick       Boolean         @default(false)
    image         String?
    image_active  String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    idDad         Int?
    order         Int?
    deleted       Boolean?
    profileAccess ProfileAccess[]

    @@map("menu")
}

model ProfileAccess {
    id        Int     @id @default(autoincrement())
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int
    menu      Menu    @relation(fields: [menuId], references: [id])
    menuId    Int

    @@map("profileaccess")
}

model CircularityUploadType {
    id                Int                 @id
    name              String              @db.VarChar(255)
    deleted           Boolean?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    circularityUpload CircularityUpload[]

    @@map("circularityUploadType")
}

model CircularityUpload {
    id       Int    @id @default(autoincrement())
    name     String @db.VarChar(255)
    urlImage String

    typeUpload   CircularityUploadType @relation(fields: [typeUploadId], references: [id])
    typeUploadId Int

    circularity   Circularity @relation(fields: [circulatityId], references: [id])
    circulatityId Int

    deleted   Boolean?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("circularityUpload")
}

model CircularityStatus {
    id   Int    @id
    name String @db.VarChar(255)

    deleted                  Boolean?
    createdAt                DateTime                   @default(now())
    updatedAt                DateTime                   @updatedAt
    circularity              Circularity[]
    circularityStatusHistory CircularityStatusHistory[]

    @@map("circulatityStatus")
}

model CircularityGeneralCondition {
    id   Int    @id
    name String @db.VarChar(255)

    deleted     Boolean?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    circularity Circularity[]

    @@map("circulatityGeneralCondition")
}

model CircularityOriginDestination {
    id                     Int           @id @default(autoincrement())
    CNPJ                   String        @db.VarChar(255)
    CPF                    String        @db.VarChar(255)
    name                   String        @db.VarChar(255)
    circulatityOrigin      Circularity[] @relation("origin")
    circulatityDestination Circularity[] @relation("destination")

    @@unique([CNPJ, CPF])
    @@map("circulatityOriginDestination")
}

model Circularity {
    id           Int    @id @default(autoincrement())
    numberRecord String @unique @db.VarChar(255)
    serial       String @db.VarChar(255)

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    generalCondition   CircularityGeneralCondition @relation(fields: [generalConditionId], references: [id])
    generalConditionId Int

    origin   CircularityOriginDestination? @relation("origin", fields: [originId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    originId Int?

    totalCountPrintPages       Int
    currentSupplylevel         Decimal? @db.Decimal(9, 2)
    currentInkLevel            Decimal? @db.Decimal(9, 2)
    currentMaintenanceKitLevel Decimal? @db.Decimal(9, 2)

    printerCleaning          Boolean @default(false)
    replacementRepair        Boolean @default(false)
    commentReplacementRepair String?

    destination    CircularityOriginDestination? @relation("destination", fields: [destinationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    destinationId  Int?
    additionalNote String?

    circulatityStatus   CircularityStatus @relation(fields: [circulatityStatusId], references: [id])
    circulatityStatusId Int

    userCreated   User   @relation(fields: [userCreatedId], references: [id])
    userCreatedId String

    deleted   Boolean?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sendEquipment Boolean @default(false)

    circularityUpload CircularityUpload[]

    @@map("circularity")
}

model CircularityStatusHistory {
    id        Int               @id @default(autoincrement())
    user      User              @relation(fields: [userId], references: [id])
    userId    String
    status    CircularityStatus @relation(fields: [statusId], references: [id])
    statusId  Int
    createdAt DateTime          @default(now())

    @@map("circularityStatusHistory")
}
